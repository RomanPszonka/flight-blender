---
openapi: '3.0.0'
info:
  title: 'Flight Blender API specification'
  description: |-
    All the Interfaces for Flight Blender are defined here, using these APIs, you can submit raw air traffic observations, geo fencing data, flight declarations. 

    Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.
  version: '1.0.0'
servers:
  - url: 'https://virtserver.swaggerhub.com/cygnus2936/flight-blender/1.0.0'
    description: 'Flight Blender API'
security:
  - AuthFromPassport:
      - 'write'
      - 'read'

paths:
  /ping:
    get:
      summary: 'Server heartbeat operation'

      description: 'This operation is a ping to check if the server is running '

      security: []
      responses:
        '200':
          description: 'pong'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'

  /rid/create_dss_subscription:
    put:
      summary: 'Create a Remote ID Subscription in the DSS'
      security:
        - AuthFromPassport: [write]
      description:
        "Create a subscription for airspace updates to a volume of interest. After extents are submitted, Flight Blender will \
        \ get a appropriate token and create a subscription with a DSS, the DSS url needs to be confirmed / set as a part of Flight Blender setup. It will then poll flights through the Flights URLs provided by the DSS "
      parameters:
        - name: view
          description:
            'The area of this view: lat1,lng1,lat2,lng2.  Size may not exceed a diagonal length specified in the standard.  The view is the smallest box
            bounded by the provided corner points.'
          schema:
            type: string
            example: 29.97816,31.13296,29.98025,31.13535
          in: query
          required: true

      responses:
        '200':
          description: Subscription Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionCreated'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - rid

  /rid/get_rid_data/{subscription_id}:
    get:
      summary: 'Get flight data from network remote id given a subscription id'
      security:
        - AuthFromPassport: [read]
      description:
        "By default flight blender sends flight data to Flight Spotlight as a scheduled job every x seconds (which can be configured) \
        \ in case you want to use a different polling mechanism, use this endpoint to get flights if you are using a polling mechanism for your display client"
      parameters:
        - in: path
          name: subscription_id
          description: 'This is the ID of the subscription'
          schema:
            type: string
            format: uuid
          required: true

      responses:
        '200':
          description: A list of aircraft observations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightFeedJSON'

        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - rid

  /rid/display_data:
    get:
      parameters:
        - in: path
        - name: view_port
          description: 'The area of this view: lat1,lng1,lat2,lng2.  Size may not exceed a diagonal length specified in the standard.  The view is the smallest box bounded by the provided corner points.'
          schema:
            type: string
            example: 29.97816,31.13296,29.98025,31.13535
          in: query
          required: true

      summary: 'Get remote id data for a given view bounding box'
      security:
        - AuthFromPassport: [read]
      description: 'This endpoint is used in the context of running the rid_qualifier tool in the DSS. Poll this endpoint to get current remote ID display data as would be visualized by a Display Application. It follows the specification in the [Airtraffic Data Protocol](https://github.com/openskies-sh/airtraffic-data-protocol-development/blob/master/Airtraffic-Data-Protocol.md#traffic-source-and-mandatory-fields).'

      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDisplayDataResponse'
          description: Details about the requested flight were retrieved successfully.
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - rid-qualifier

  /rid/display_data/{flight_id}:
    summary: A remote ID flight reported by a remote ID service provider.

    get:
      tags:
        - rid-qualifier

      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFlightDetailsResponse'
          description: Flight details were successfully retrieved.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
          description:
            Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
          description:
            The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
          description: The requested flight could not be found.
      security:
        - AuthFromAuthorizationAuthority:
            - dss.read.identification_service_areas
      summary: Get flight details
      description:
        Retrieve details of a flight from a remote ID service provider
        to meet remote ID requirements.
    parameters:
      - name: flight_id
        description:
          Remote ID flight ID for this flight; may be obtained in general
          /flights query.
        schema:
          $ref: '#/components/schemas/RIDFlightID'
        in: path
        required: true
    tags:
      - rid-qualifier

  /set_air_traffic:
    put:
      summary: 'Add Airtraffic observation'
      security:
        - AuthFromPassport: [write]
      description:
        "Submit air traffic data to the service, after submission, Flight Blender will \
        \ normalizes the data and eventually send it to Flight Spotlight. A single or multiple observation can be submitted at a given time"

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                observations:
                  $ref: '#/components/schemas/ArrayOfObservations'

      responses:
        '200':
          description: 'OK'
        '201':
          description: 'Airtraffic data added'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - air-traffic
  /flight_declaration_ops/flight_declaration:
    get:
      summary: 'Get a list of all submitted flight declarations'
      security:
        - AuthFromPassport: [read]
      description: "By default all flight declarations submitted in Flight Blender are not approved / authorized, for most most operations, authorization may \ not be necessary but in case operations needs authorization, this end point can be queried to display authorization"

      parameters:
        - name: start_date
          in: query
          schema:
            type: string
            format: date
          description: >
            The start date for the report. Must be used together with `end_date`.
        - name: end_date
          in: query
          schema:
            type: string
            format: date
          description: >
            The end date for the report. Must be used together with `start_date`.
      responses:
        '200':
          description: Get a list of declared operations, `start_date`+`end_date` are optional, by default declared operations for the past month are displayed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightDeclarationList'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - flight-declaration

  /flight_declaration_ops/flight_declaration/{flight_declaration_id}:
    get:
      summary: 'Get the details of a single flight declaration'
      security:
        - AuthFromPassport: [read]
      description: "By default all flight declarations submitted in Flight Blender are not approved / authorized, for most most operations, authorization may \ not be necessary but in case operations needs authorization, this end point can be queried to display authorization"
      parameters:
        - in: path
          name: flight_declaration_id
          description: 'This is the ID of the flight declaration'
          schema:
            type: string
            format: uuid
          required: true

      responses:
        '200':
          description: Declaration successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightDeclarationDetail'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'

      tags:
        - flight-declaration

  /flight_declaration_ops/flight_declaration_review/{flight_declaration_id}:
    put:
      summary: 'Approve / Reject a flight declaration'
      security:
        - AuthFromPassport: [read]
      description: "By default all flight declarations submitted in Flight Blender are not approved / authorized, for most most operations, authorization may \ not be necessary but in case operations needs authorization, this end point to change the status of operation"
      parameters:
        - in: path
          name: flight_declaration_id
          description: 'This is the ID of the flight declaration'
          schema:
            type: string
            format: uuid
          required: true

      requestBody:
        description: Set whether a flight is approved or rejected
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproveRejectDeclaration'

      responses:
        '200':
          description: Review successfully submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightDeclarationDetail'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'

      tags:
        - flight-declaration

  /flight_declaration_ops/set_flight_declaration:
    put:
      summary: 'Add a Flight Declaration'
      description: "Submit a Flight Declaration into Flight Blender  \
        \ A flight declaration can be upto 24 hours in advance and follows the Flight Declaration format etc."
      security:
        - AuthFromPassport: [write]

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlightDeclarationJSON'

      responses:
        '200':
          description: A flight declaration created notification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightDeclarationCreated'
              example:
                id: 842bde46-6559-49af-8272-3da722a48a7d
                message: 'Flight Declaration submitted'
                is_approved: 0
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'

      tags:
        - flight-declaration

  /geo_fence_ops/set_geo_fence:
    put:
      summary: 'Add a Geofence'
      security:
        - AuthFromPassport: [write]
      description:
        "Submit a Geofence declaration which is in turn submitted to  \
        \ Flight Spotlight. Geofence can be used to specify areas of interest, restricted areas, constraints etc."

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeoFenceGeoJSON'

      responses:
        '200':
          description: Geofence successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoFenceCreated'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'

      tags:
        - geo-fence

  /geo_fence_ops/geo_fence:
    get:
      summary: 'Get a list of all submitted Geofence'
      security:
        - AuthFromPassport: [read]
      description: 'By default all geo fence submitted in Flight Blender have a start and end date, if none is provided, the server will default to today as start and end date'

      parameters:
        - name: start_date
          in: query
          schema:
            type: string
            format: date
          description: >
            The start date for the report. Must be used together with `end_date`.
        - name: end_date
          in: query
          schema:
            type: string
            format: date
          description: >
            The end date for the report. Must be used together with `start_date`.
      responses:
        '200':
          description: Get a list of submitted geo fence, `start_date`+`end_date` are optional, by default geo fences for today displayed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoFenceGeoJSONList'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - geo-fence

  /geo_fence_ops/geo_fence/{geo_fence_id}:
    get:
      summary: 'Get the details of a single geo fence'
      security:
        - AuthFromPassport: [read]
      description: 'Show details of a geofence as stored in the database'
      parameters:
        - in: path
          name: geo_fence_id
          description: 'This is the ID of the geo fence'
          schema:
            type: string
            format: uuid
          required: true

      responses:
        '200':
          description: 'Details of all Geofences in the database'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoFenceDetails'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'

      tags:
        - geo-fence

components:
  securitySchemes:
    AuthFromPassport:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'http://id.openskies.sh/oauth/token'
          scopes:
            blender.write: 'Write data into Flight Blender'
            blender.read: 'Read data into Flight Blender'

  schemas:
    ApproveRejectDeclaration:
      description: A flight declaration approved / created
      type: object
      properties:
        is_approved:
          type: boolean
          example: 1

    FlightDeclarationCreated:
      description: A flight declaration has been created
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        message:
          type: string
          example: 'Submitted Flight Declaration'
        is_approved:
          type: boolean
          example: 1

    SubscriptionCreated:
      description: A subscription in the DSS for the area has been created
      type: object
      properties:
        message:
          type: string
          example: DSS Subscription created
        id:
          type: string
          format: uuid
          readOnly: true
        dss_subscription_response:
          type: object
          properties:
            created:
              type: integer
              format: uuid
              readOnly: true
            dss_subscription_id:
              type: string
              format: uuid
              readOnly: true
            notification_index:
              type: integer
              format: uuid
              readOnly: true

    GeoFenceCreated:
      description: A Geofence has been created
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        message:
          type: string
          example: 'Geofence successfully created'

    Standard500ErrorResponse:
      description: An unexpected error occured.
      $ref: '#/components/schemas/Error'

    BadRequest400ErrorResponse:
      description: The JSON is not valid

      $ref: '#/components/schemas/Error'

    Unauthorized401ErrorResponse:
      description: The request requires an user authentication

      $ref: '#/components/schemas/Error'

    Forbidden403ErrorResponse:
      description: the access is not allowed

      $ref: '#/components/schemas/Error'

    FlightFeedJSON:
      type: object
      properties:
        observations:
          type: array
          items:
            $ref: '#/components/schemas/ArrayOfObservations'

    FlightDeclarationList:
      type: array
      items:
        $ref: '#/components/schemas/FlightDeclarationDetail'

    FlightDeclarationDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
        is_approved:
          type: string
          format: boolean
        start_datetime:
          type: string
          format: date-time
        end_datetime:
          type: string
          format: date-time
        gutma_flight_declaration:
          type: object
          $ref: '#/components/schemas/FlightDeclarationJSON'

    FlightDeclarationJSON:
      type: object
      required:
        - flight_declaration
      properties:
        operation_mode:
          type: string
          enum: [vlos, bvlos]
        operator_name:
          type: string
        exchange_type:
          type: string
          enum:
            - flight_declaration
        flight_id:
          type: string
          format: uuid
        plan_id:
          type: string
          format: uuid
        flight_state:
          type: number
        sequence_number:
          type: number
        flight_declaration:
          type: object
          properties:
            parts:
              type: array
              items:
                $ref: '#/components/schemas/FlightDeclarationFeatureGeoJSON'

    FlightDeclarationFeatureGeoJSON:
      type: object
      required:
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: '#/components/schemas/FlightDeclarationGeometryGeoJSON'

        properties:
          type: object
          properties:
            start_time:
              type: string
              format: date-time
            end_time:
              type: string
              format: date-time
            max_altitude:
              type: object
              properties:
                metres:
                  type: number
                datum:
                  type: string
                  enum:
                    - 'WGS84'
            min_altitude:
              type: object
              properties:
                metres:
                  type: number
                datum:
                  type: string
                  enum:
                    - 'WGS84'

          nullable: true
        id:
          oneOf:
            - type: string
            - type: integer

    Latitude:
      format: double
      description:
        Degrees of latitude north of the equator, with reference to the
        WGS84 ellipsoid.
      maximum: 90
      exclusiveMaximum: false
      minimum: -90
      exclusiveMinimum: false
      type: number
      example: 34.12
    Longitude:
      format: double
      description:
        Degrees of longitude east of the Prime Meridian, with reference
        to the WGS84 ellipsoid.
      maximum: -180
      exclusiveMaximum: false
      minimum: 180
      exclusiveMinimum: false
      type: number
      example: -118.456

    LatLngPoint:
      description: Point on the earth's surface.
      required:
        - lat
        - lng
      type: object
      properties:
        lng:
          $ref: '#/components/schemas/Longitude'
        lat:
          $ref: '#/components/schemas/Latitude'

    GeoPolygon:
      description: |-
        An enclosed area on the earth.
        The bounding edges of this polygon shall be the shortest paths between connected vertices.  This means, for instance, that the edge between two points both defined at a particular latitude is not generally contained at that latitude.
        The winding order shall be interpreted as the order which produces the smaller area.
        The path between two vertices shall be the shortest possible path between those vertices.
        Edges may not cross.
        Vertices may not be duplicated.  In particular, the final polygon vertex shall not be identical to the first vertex.
      required:
        - vertices
      type: object
      properties:
        vertices:
          minItems: 3
          type: array
          items:
            $ref: '#/components/schemas/LatLngPoint'

    Volume3D: # Reference https://github.com/uastech/standards/blob/master/remoteid/canonical.yaml
      description:
        A three-dimensional geographic volume consisting of a vertically-extruded
        polygon.
      required:
        - footprint
      type: object
      properties:
        footprint:
          anyOf:
            - $ref: '#/components/schemas/GeoPolygon'
          description: Projection of this volume onto the earth's surface.
        altitude_lo:
          anyOf:
            - $ref: '#/components/schemas/Altitude'
          description: Minimum bounding altitude of this volume.
        altitude_hi:
          anyOf:
            - $ref: '#/components/schemas/Altitude'
          description: Maximum bounding altitude of this volume.

    Altitude:
      format: float
      description: An altitude, in meters, above the WGS84 ellipsoid.
      type: number
      example: 19.5

    Volume4D: # Reference https://github.com/uastech/standards/blob/master/remoteid/canonical.yaml
      description: Contiguous block of geographic spacetime.
      required:
        - spatial_volume
      type: object
      properties:
        spatial_volume:
          anyOf:
            - $ref: '#/components/schemas/Volume3D'
          description: Constant spatial extent of this volume.
        time_start:
          format: date-time
          description:
            Beginning time of this volume.  RFC 3339 format, per OpenAPI
            specification.
          type: string
        time_end:
          format: date-time
          description: End time of this volume.  RFC 3339 format, per OpenAPI specification.
          type: string

    GeoFenceGeoJSON:
      type: object
      required:
        - type
        - features
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/GeoFenceFeatures'

    GeoFenceDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        raw_geo_fence:
          type: object
          $ref: '#/components/schemas/GeoFenceGeoJSON'
        upper_limit:
          type: number
          multipleOf: 0.01
        lower_limit:
          type: number
          multipleOf: 0.01
        name:
          type: string
        bounds:
          type: string
        altitude_ref:
          type: number
        start_datetime:
          type: string
          format: date-time
        end_datetime:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    GeoFenceGeoJSONList:
      type: array
      items:
        $ref: '#/components/schemas/GeoFenceDetails'

    Point2D:
      type: array
      maxItems: 2
      minItems: 2
      items:
        type: number

    GeoFenceFeatures:
      type: object
      required:
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: '#/components/schemas/GeoFenceGeometryGeoJSON'

        properties:
          type: object
          properties:
            upper_limit:
              type: number
              format: float
            lower_limit:
              type: number
              format: float

          nullable: true
        id:
          oneOf:
            - type: string
            - type: integer

    FlightDeclarationGeometryGeoJSON:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - Polygon
            - MultiPolygon
            - LineString

        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/Point2D'
    GeoFenceGeometryGeoJSON:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - Polygon
            - MultiPolygon

        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/Point2D'

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string

    ArrayOfObservations:
      type: array
      items:
        type: object
        required:
          - lon_dd
          - lat_dd
          - timestamp
          - altitude_mm
          - icao_address

        properties:
          lon_dd:
            type: number
            format: float
          lat_dd:
            type: number
            format: float
          timestamp:
            type: integer
            format: int64
          icao_address:
            type: string
            maxLength: 24
          source_type:
            type: integer
          traffic_source:
            type: integer
          metadata:
            type: object

    GetDisplayDataResponse:
      description: Response to a request for current data that would be visualized by a Display Application.
      type: object
      properties:
        flights:
          description: Current information for set of discovered flights whose precise locations are known.

          type: array
          $ref: '#/components/schemas/Flight'

        clusters:
          description: >-
            Current information for sets of discovered flights whose precise locations are not
            known.
          type: array
          items:
            $ref: '#/components/schemas/Cluster'
          default: []
    GetDetailsResponse:
      description: Response to a request to get details about a flight.
      type: object
    Flight:
      description: ''
      required:
        - id
      type: object
      properties:
        id:
          description: >-
            Identifier of flight that may be used to obtain details about the flight.
            This is not necessarily the UTM/flight ID in the remote ID system.
          type: string
        most_recent_position:
          description: Most recent position known for the flight.
          allOf:
            - $ref: '#/components/schemas/Position'
        recent_paths:
          description: Paths the flight recently traveled, if available.
          type: array
          items:
            $ref: '#/components/schemas/Path'
    Cluster:
      description: 'A general area containing one or more flight.'
      type: object
      required:
        - corners
        - area_sqm
        - number_of_flights
      properties:
        corners:
          description: Two opposite corners of a rectangular lat-lng box bounding the cluster.
          type: array
          items:
            $ref: '#/components/schemas/Position'
          minItems: 2
          maxItems: 2
        area_sqm:
          description: Area of the cluster in square meters.
          type: number
          format: double
        number_of_flights:
          description: Number of flights within the cluster.
          type: number
          format: int32
          minValue: 1
    Position:
      description: 'A position on Earth.'
      required:
        - lat
        - lng
      type: object
      properties:
        lat:
          format: double
          description: >-
            Degrees of latitude north of the equator, with reference to the WGS84 ellipsoid.
          type: number
        lng:
          format: double
          description: >-
            Degrees of longitude east of the Prime Meridian, with reference to the WGS84
            ellipsoid.
          type: number
        alt:
          format: double
          description: >-
            Geodetic altitude (NOT altitude above launch, altitude above ground, or EGM96):
            aircraft distance above the WGS84 ellipsoid as measured along a line that passes
            through the aircraft and is normal to the surface of the WGS84 ellipsoid.
          type: number
    Path:
      description: Path followed by a flight.
      required:
        - positions
      type: object
      properties:
        positions:
          description: Sequential positions available for a flight.
          type: array
          items:
            $ref: '#/components/schemas/Position'

    RIDFlightID:
      description: |-
        ID, unique to a remote ID service provider, which identifies a particular flight for which the remote ID service provider is providing remote ID services.

        The following characters are not allowed: \0 \t \r \n # % / : ? @ [ \ ]
      maxLength: 255
      minLength: 1
      type: string
      example: uss1.JA6kHYCcByQ-6AfU

    GetFlightDetailsResponse:
      description:
        Response to remote ID provider query for details about a specific
        flight.
      required:
        - details
      type: object
      properties:
        details:
          $ref: '#/components/schemas/RIDFlightDetails'

    RIDFlightDetails:
      description:
        Details about a flight reported by a remote ID service provider.  At
        least one of the registration or serial fields must be filled if required
        by CAA.
      required:
        - id
      type: object
      properties:
        id:
          description: ID for this flight, matching argument in request.
          type: string
          example: a3423b-213401-0023
        operator_id:
          description:
            'CAA-issued registration/license ID for the remote pilot or
            operator. '
          type: string
        operator_location:
          anyOf:
            - $ref: '#/components/schemas/LatLngPoint'
          description: Location of party controlling the aircraft.
        operation_description:
          description:
            Free-text field that enables the operator to describe the purpose
            of a flight, if so desired.
          type: string
          example:
            SafeFlightDrone company doing survey with DJI Inspire 2. See my
            privacy policy www.example.com/privacy.
        auth_data:
          $ref: '#/components/schemas/RIDAuthData'
        serial_number:
          description:
            Can be specified when no registration ID exists and required
            by law in a region. This is expressed in the ANSI/CTA-2063-A Physical Serial
            Number format.
          type: string
          example: INTCJ123-4567-890
        registration_number:
          description:
            If a CAA provides a method of registering UAS, this number
            is provided by the CAA or its authorized representative.  Required when
            required by law in a region.
          type: string
          example: FA12345897

    RIDAuthData:
      description: Additional authentication data.
      required:
        - format
        - data
      type: object
      properties:
        format:
          description: Format of additional authentication data.
          type: string
        data:
          description: Authentication data in form specified by `format`.
          type: string

tags:
  - name: rid
    description: Flight Blender allows connections and interactions with the DSS by enabling creation of subscriptions to the DSS for remote-ID data, these endpoints detail how the functionality work for creating a DSS subscription and querying the area for remote-ID data
  - name: rid-qualifier
    description: RID Qualifier is a set of tests created to check compliance with ASTM remote-id standards, these enpoints implement the Observation API as described by the test suite.
  - name: air-traffic
    description: Airtraffic data from sensors such as ADS-B, FLARM etc. can be intergrated into Flight Blender, Flight Blender will normalize the traffic and send it to the Display. Use these endpoints to submit air-traffic data.
  - name: flight-declaration
    description: Using tools like Flight Launchpad (see Openskies Github) you can submit declarations of flight for approval / review to the Blender system.
  - name: geo-fence
    description: You can submit geo-fences compliant with the ED-269 standard, use these operations into Flight Blender.
