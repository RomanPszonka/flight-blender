---
openapi: "3.0.0"
info:
  title: "Flight Blender API specification"
  description: |-
    All the Interfaces for Flight Blender are defined here, using these APIs, you can submit raw air traffic observations, geo fencing data, flight declarations. 

    Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.
  version: "1.0.0"
servers:
  - url: "https://virtserver.swaggerhub.com/cygnus2936/flight-blender/1.0.0"
    description: "Flight Blender API"
security:
  - AuthFromPassport:
      - "write"
      - "read"

paths:
  /ping:
    get:
      summary: "Server heartbeat operation"

      description: "This operation is a ping to check if the server is running "

      security: []
      responses:
        "200":
          description: "pong"
        "400":
          $ref: "#/components/schemas/BadRequest400ErrorResponse"
        "401":
          $ref: "#/components/schemas/Unauthorized401ErrorResponse"
        "403":
          $ref: "#/components/schemas/Forbidden403ErrorResponse"
        "500":
          $ref: "#/components/schemas/Standard500ErrorResponse"

  /create_dss_subscription:
    post:
      summary: "Create a Remote ID Subscription in the DSS"
      security:
        - AuthFromPassport: [write]
      description:
        "Create a subscription for airspace updates to a volume of interest. After extents are submitted, Flight Blender will \
        \ get a appropriate token and create a subscription with a DSS, the DSS url needs to be confirmed / set as a part of Flight Blender setup. It will then poll flights through the Flights URLs provided by the DSS "
      parameters:
        - name: view
          description: 'The area of this view: lat1,lng1,lat2,lng2.  Size may not exceed a diagonal length specified in the standard.  The view is the smallest box
            bounded by the provided corner points.'
          schema:
            type: string
            example: 29.97816,31.13296,29.98025,31.13535
          in: query
          required: true

      responses:
        "200":
          description: "OK"
        "201":
          description: "Subscription Created"
        "400":
          $ref: "#/components/schemas/BadRequest400ErrorResponse"
        "401":
          $ref: "#/components/schemas/Unauthorized401ErrorResponse"
        "403":
          $ref: "#/components/schemas/Forbidden403ErrorResponse"
        "500":
          $ref: "#/components/schemas/Standard500ErrorResponse"

  /get_rid_data/{subscription_id}:

    get:
      summary: "Get remote id data given a subscription id"
      security:
        - AuthFromPassport: [read]
      description:
        "By default flight blender sends flight data to Flight Spotlight as a scheduled job every x seconds (which can be configured) \
        \ in case you want to use a different polling mechanism, use this endpoint to get flights if you are using a polling mechanism for your display client"
      parameters:
        - in: path 
          name: subscription_id
          description: 'This is the ID of the subscription'
          schema:
            type: string
            format: uuid            
          required: true

      responses:
        "200":
          $ref: "#/components/schemas/FlightFeedJSON"
        "400":
          $ref: "#/components/schemas/BadRequest400ErrorResponse"
        "401":
          $ref: "#/components/schemas/Unauthorized401ErrorResponse"
        "403":
          $ref: "#/components/schemas/Forbidden403ErrorResponse"
        "500":
          $ref: "#/components/schemas/Standard500ErrorResponse"

  /set_air_traffic:
    post:
      summary: "Add Airtraffic observation"
      security:
        - AuthFromPassport: [write]
      description:
        "Submit air traffic data to the service, after submission, Flight Blender will \
        \ normalizes the data and eventually send it to Flight Spotlight. A single or multiple observation can be submitted at a given time"

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                observations:
                  $ref: "#/components/schemas/ArrayOfObservations"

      responses:
        "200":
          description: "OK"
        "201":
          description: "Airtraffic data added"
        "400":
          $ref: "#/components/schemas/BadRequest400ErrorResponse"
        "401":
          $ref: "#/components/schemas/Unauthorized401ErrorResponse"
        "403":
          $ref: "#/components/schemas/Forbidden403ErrorResponse"
        "500":
          $ref: "#/components/schemas/Standard500ErrorResponse"

  /flight_declaration:
    
    get:
      summary: "Get a list of all submitted flight declarations"
      security:
        - AuthFromPassport: [read]
      description:
        "By default all flight declarations submitted in Flight Blender are not approved / authorized, for most most operations, authorization may \ not be necessary but in case operations needs authorization, this end point can be queried to display authorization"
        

      responses:
        "200":
          content: 
            application/json:
              schema: 
                $ref: "#/components/schemas/FlightDeclarationList"
        "400":
          $ref: "#/components/schemas/BadRequest400ErrorResponse"
        "401":
          $ref: "#/components/schemas/Unauthorized401ErrorResponse"
        "403":
          $ref: "#/components/schemas/Forbidden403ErrorResponse"
        "500":
          $ref: "#/components/schemas/Standard500ErrorResponse"

  /flight_declaration/{flight_declaration_id}:
    
    get:
      summary: "Get the details of a a single flight declaration"
      security:
        - AuthFromPassport: [read]
      description:
        "By default all flight declarations submitted in Flight Blender are not approved / authorized, for most most operations, authorization may \ not be necessary but in case operations needs authorization, this end point can be queried to display authorization"
      parameters:
        - in: path 
          name: flight_declaration_id
          description: 'This is the ID of the flight declaration'
          schema:
            type: string
            format: uuid            
          required: true

      responses:
        "200":
          content: 
            application/json:
              schema: 
                $ref: "#/components/schemas/FlightDeclarationDetail"
        "400":
          $ref: "#/components/schemas/BadRequest400ErrorResponse"
        "401":
          $ref: "#/components/schemas/Unauthorized401ErrorResponse"
        "403":
          $ref: "#/components/schemas/Forbidden403ErrorResponse"
        "500":
          $ref: "#/components/schemas/Standard500ErrorResponse"


  /set_flight_declaration:
    post:
      summary: "Add a Flight Declaration"
      description: "Submit a Flight Declaration into Flight Blender  \
        \ A flight declaration can be upto 24 hours in advance and follows the Flight Declaration format etc."
      security:
        - AuthFromPassport: [write]

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlightDeclarationJSON"

      responses:
        "200":
          description: A flight declaration created notification
          content: 
            application/json:
              schema: 
                $ref: "#/components/schemas/FlightDeclarationCreated"
              example: 
                id: 842bde46-6559-49af-8272-3da722a48a7d
                message: "Flight Declaration submitted"
                is_approved: 0
                
        "400":
          $ref: "#/components/schemas/BadRequest400ErrorResponse"
        "401":
          $ref: "#/components/schemas/Unauthorized401ErrorResponse"
        "403":
          $ref: "#/components/schemas/Forbidden403ErrorResponse"
        "500":
          $ref: "#/components/schemas/Standard500ErrorResponse"

  /set_geo_fence:
    post:
      summary: "Add a Geofence"
      security:
        - AuthFromPassport: [write]
      description:
        "Submit a Geofence declaration which is in turn submitted to  \
        \ Flight Spotlight. Geofence can be used to specify areas of interest, restricted areas, constraints etc."

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GeoFenceGeoJSON"

      responses:
        "200":
          $ref: "#/components/schemas/GeoFenceCreated"
        "201":
          $ref: "#/components/schemas/GeoFenceCreated"
        "400":
          $ref: "#/components/schemas/BadRequest400ErrorResponse"
        "401":
          $ref: "#/components/schemas/Unauthorized401ErrorResponse"
        "403":
          $ref: "#/components/schemas/Forbidden403ErrorResponse"
        "500":
          $ref: "#/components/schemas/Standard500ErrorResponse"

components:
  securitySchemes:
    AuthFromPassport:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: "http://id.openskies.sh/oauth/token"
          scopes:
            blender.write: "Write data into Flight Blender"
            blender.read: "Read data into Flight Blender"


  schemas:

    FlightDeclarationCreated:
      description: A flight declaration has been created
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        message:
          type: string
          example: "Submitted Flight Declaration"
        is_approved: 
          type: boolean
          example: 1

    GeoFenceCreated:
      description: A Geofence has been created
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        message:
          type: string
          example: "Submitted Geofence"

    Standard500ErrorResponse:
      description: An unexpected error occured.      
      $ref: "#/components/schemas/Error"

    BadRequest400ErrorResponse:
      description: The JSON is not valid
      
      $ref: "#/components/schemas/Error"

    Unauthorized401ErrorResponse:
      description: The request requires an user authentication
      
      $ref: "#/components/schemas/Error"

    Forbidden403ErrorResponse:
      description: the access is not allowed
      
      $ref: "#/components/schemas/Error"
    
    FlightFeedJSON:
      type: array
      items:
        $ref: '#/components/schemas/ArrayOfObservations'

    FlightDeclarationList:
      type: array
      items:
        $ref: '#/components/schemas/FlightDeclarationDetail'

    FlightDeclarationDetail: 
      type: object
      properties:
        id:
          type: string
          format: uuid
        is_approved:
          type: string
          format: boolean
        start_datetime:
          type: string
          format: date-time
        end_datetime:
          type: string
          format: date-time
        gutma_flight_declaration: 
          type: object
          $ref: '#/components/schemas/FlightDeclarationJSON'

    FlightDeclarationJSON:
      type: object
      required:
        - flight_declaration
      properties:      
        operation_mode:
          type: string
          enum: [vlos,bvlos]      
        operator_name:
          type: string          
        exchange_type:
          type: string
          enum:
            - flight_declaration
        flight_id:
          type: string
          format: uuid
        plan_id:
          type: string
          format: uuid
        flight_state:
          type: number
        sequence_number:
          type: number
        flight_declaration:
          type: object
          properties:
            parts:
              type: array
              items:
                $ref: "#/components/schemas/FlightDeclarationFeatureGeoJSON"

    FlightDeclarationFeatureGeoJSON:
      type: object
      required:
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: "#/components/schemas/FlightDeclarationGeometryGeoJSON"

        properties:
          type: object
          properties:
            start_time:
              type: string
              format: date-time
            end_time:
              type: string
              format: date-time
            max_altitude:
              type: object
              properties:
                metres:
                  type: number
                datum:
                  type: string
                  enum:
                    - "WGS84"
            min_altitude:
              type: object
              properties:
                metres:
                  type: number
                datum:
                  type: string
                  enum:
                    - "WGS84"

          nullable: true
        id:
          oneOf:
            - type: string
            - type: integer

    Latitude:
      format: double
      description:
        Degrees of latitude north of the equator, with reference to the
        WGS84 ellipsoid.
      maximum: 90
      exclusiveMaximum: false
      minimum: -90
      exclusiveMinimum: false
      type: number
      example: 34.12
    Longitude:
      format: double
      description:
        Degrees of longitude east of the Prime Meridian, with reference
        to the WGS84 ellipsoid.
      maximum: -180
      exclusiveMaximum: false
      minimum: 180
      exclusiveMinimum: false
      type: number
      example: -118.456

    LatLngPoint:
      description: Point on the earth's surface.
      required:
        - lat
        - lng
      type: object
      properties:
        lng:
          $ref: "#/components/schemas/Longitude"
        lat:
          $ref: "#/components/schemas/Latitude"

    GeoPolygon:
      description: |-
        An enclosed area on the earth.
        The bounding edges of this polygon shall be the shortest paths between connected vertices.  This means, for instance, that the edge between two points both defined at a particular latitude is not generally contained at that latitude.
        The winding order shall be interpreted as the order which produces the smaller area.
        The path between two vertices shall be the shortest possible path between those vertices.
        Edges may not cross.
        Vertices may not be duplicated.  In particular, the final polygon vertex shall not be identical to the first vertex.
      required:
        - vertices
      type: object
      properties:
        vertices:
          minItems: 3
          type: array
          items:
            $ref: "#/components/schemas/LatLngPoint"

            
    Volume3D: # Reference https://github.com/uastech/standards/blob/master/remoteid/canonical.yaml
      description:
        A three-dimensional geographic volume consisting of a vertically-extruded
        polygon.
      required:
        - footprint
      type: object
      properties:
        footprint:
          anyOf:
            - $ref: "#/components/schemas/GeoPolygon"
          description: Projection of this volume onto the earth's surface.
        altitude_lo:
          anyOf:
            - $ref: "#/components/schemas/Altitude"
          description: Minimum bounding altitude of this volume.
        altitude_hi:
          anyOf:
            - $ref: "#/components/schemas/Altitude"
          description: Maximum bounding altitude of this volume.

    Altitude:
      format: float
      description: An altitude, in meters, above the WGS84 ellipsoid.
      type: number
      example: 19.5

    Volume4D: # Reference https://github.com/uastech/standards/blob/master/remoteid/canonical.yaml
      description: Contiguous block of geographic spacetime.
      required:
        - spatial_volume
      type: object
      properties:
        spatial_volume:
          anyOf:
            - $ref: "#/components/schemas/Volume3D"
          description: Constant spatial extent of this volume.
        time_start:
          format: date-time
          description:
            Beginning time of this volume.  RFC 3339 format, per OpenAPI
            specification.
          type: string
        time_end:
          format: date-time
          description: End time of this volume.  RFC 3339 format, per OpenAPI specification.
          type: string

    GeoFenceGeoJSON:
      type: object
      required:
        - type
        - features
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: "#/components/schemas/GeoFenceFeatureGeoJSON"

    Point2D:
      type: array
      maxItems: 2
      minItems: 2
      items:
        type: number

    GeoFenceFeatureGeoJSON:
      type: object
      required:
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: "#/components/schemas/GeoFenceGeometryGeoJSON"

        properties:
          type: object
          properties:
            upper_limit:
              type: number
              format: float
            lower_limit:
              type: number
              format: float

          nullable: true
        id:
          oneOf:
            - type: string
            - type: integer

    FlightDeclarationGeometryGeoJSON:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - Polygon
            - MultiPolygon
            - LineString

        coordinates:
          type: array
          items:
            $ref: "#/components/schemas/Point2D"
    GeoFenceGeometryGeoJSON:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - Polygon
            - MultiPolygon

        coordinates:
          type: array
          items:
            $ref: "#/components/schemas/Point2D"

    
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string

    ArrayOfObservations:
      type: array
      items:
        type: object
        required:
          - lon_dd
          - lat_dd
          - timestamp
          - altitude_mm
          - icao_address

        properties:
          lon_dd:
            type: number
            format: float
          lat_dd:
            type: number
            format: float
          timestamp:
            type: integer
            format: int64
          icao_address:
            type: string
            maxLength: 24
          source_type:
            type: integer
          traffic_source:
            type: integer

