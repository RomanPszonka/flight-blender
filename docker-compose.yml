version: "3"
services:
  redis-argon-server:
    platform: linux/amd64
    command: ["redis-server", "/redis.conf", "--requirepass", "$REDIS_PASSWORD"]
    image: "redis:latest"
    expose:
      - "6379"
    volumes:
      - ./config/redis.conf:/redis.conf
    container_name: "redis-argon-server"
    env_file:
      - ".env"

  db-argon-server:
    platform: linux/amd64
    container_name: "db-argon-server"
    image: postgres
    expose:
      - "5432"
    restart: unless-stopped
    volumes:
      - db_data:/var/lib/postgresql/data
    env_file:
      - ".env"

  web:
    platform: linux/amd64
    container_name: "web"
    env_file:
      - ".env"
    build: .
    image: openskiessh/flight-blender
    command: ./entrypoints/with-database/entrypoint.sh
    ports:
      - "8000:8000"
    depends_on:
      - redis-argon-server
      - db-argon-server
    volumes:
      - .:/app

  argon-server-celery:
    platform: linux/amd64
    container_name: worker
    image: openskiessh/flight-blender
    build:
      context: "."
    env_file:
      - ".env"
    command: ./entrypoints/with-database/entrypoint-celery.sh
    volumes:
      - .:/app
    depends_on:
      - redis-argon-server

  argon-server-celery-beat:
    platform: linux/amd64
    container_name: argon-server-beat
    image: openskies-sh/flight-blender
    restart: on-failure
    build:
      context: "."
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    hostname: celery-beat
    command: ./entrypoints/with-database/entrypoint-beat.sh
    volumes:
      - .:/app
    depends_on:
      redis-argon-server:
        condition: service_started
      db-argon-server:
        condition: service_started
      argon-server-celery:
        condition: service_started

volumes:
  app:
  db_data:

networks:
  interop_ecosystem_network:
    name: interop_ecosystem_network
    external: true
