# generated by datamodel-codegen:
#   filename:  rid.yaml
#   timestamp: 2025-06-09T20:04:59+00:00

from __future__ import annotations

from dataclasses import dataclass, field
from enum import Enum
from typing import List, Optional


class RIDFormat(str, Enum):
    RFC3339 = "RFC3339"


@dataclass
class RIDTime:
    value: str
    format: RIDFormat


class Units(str, Enum):
    M = "M"


@dataclass
class Radius:
    value: float
    units: Units


URL = str


SubscriptionNotificationIndex = int


UUIDv4 = str


Version = str


EntityUUID = UUIDv4


SubscriptionUUID = UUIDv4


RIDFlightID = str


@dataclass
class RIDAuthData:
    format: Optional[int] = 0
    data: Optional[str] = ""


class HorizontalAccuracy(str, Enum):
    HAUnknown = "HAUnknown"
    HA10NMPlus = "HA10NMPlus"
    HA10NM = "HA10NM"
    HA4NM = "HA4NM"
    HA2NM = "HA2NM"
    HA1NM = "HA1NM"
    HA05NM = "HA05NM"
    HA03NM = "HA03NM"
    HA01NM = "HA01NM"
    HA005NM = "HA005NM"
    HA30m = "HA30m"
    HA10m = "HA10m"
    HA3m = "HA3m"
    HA1m = "HA1m"


class VerticalAccuracy(str, Enum):
    VAUnknown = "VAUnknown"
    VA150mPlus = "VA150mPlus"
    VA150m = "VA150m"
    VA45m = "VA45m"
    VA25m = "VA25m"
    VA10m = "VA10m"
    VA3m = "VA3m"
    VA1m = "VA1m"


@dataclass
class ErrorResponse:
    message: Optional[str] = ""


class SpeedAccuracy(str, Enum):
    SAUnknown = "SAUnknown"
    SA10mpsPlus = "SA10mpsPlus"
    SA10mps = "SA10mps"
    SA3mps = "SA3mps"
    SA1mps = "SA1mps"
    SA03mps = "SA03mps"


GeoPolygonString = str


class Reference(str, Enum):
    TakeoffLocation = "TakeoffLocation"
    GroundLevel = "GroundLevel"


@dataclass
class RIDHeight:
    reference: Reference
    distance: Optional[float] = 0


Latitude = float


Longitude = float


@dataclass
class LatLngPoint:
    lng: Longitude
    lat: Latitude


class WGSReference(str, Enum):
    W84 = "W84"


@dataclass
class Altitude:
    value: float
    reference: WGSReference
    units: Units


@dataclass
class OperatingArea:
    aircraft_count: Optional[int] = None
    volumes: Optional[List[OperatingArea]] = field(default_factory=lambda: [])


@dataclass
class Polygon:
    vertices: List[LatLngPoint]


class RIDOperationalStatus(str, Enum):
    Undeclared = "Undeclared"
    Ground = "Ground"
    Airborne = "Airborne"
    Emergency = "Emergency"
    RemoteIDSystemFailure = "RemoteIDSystemFailure"


SpecificSessionID = str


@dataclass
class UASID:
    serial_number: Optional[str] = ""
    registration_id: Optional[str] = ""
    utm_id: Optional[str] = ""
    specific_session_id: Optional[SpecificSessionID] = ""


class AltitudeType(str, Enum):
    Takeoff = "Takeoff"
    Dynamic = "Dynamic"
    Fixed = "Fixed"


@dataclass
class OperatorLocation:
    position: LatLngPoint
    altitude: Optional[Altitude] = None
    altitude_type: Optional[AltitudeType] = None


class Category(str, Enum):
    EUCategoryUndefined = "EUCategoryUndefined"
    Open = "Open"
    Specific = "Specific"
    Certified = "Certified"


class Class(str, Enum):
    EUClassUndefined = "EUClassUndefined"
    Class0 = "Class0"
    Class1 = "Class1"
    Class2 = "Class2"
    Class3 = "Class3"
    Class4 = "Class4"
    Class5 = "Class5"
    Class6 = "Class6"


@dataclass
class UAClassificationEU:
    category: Optional[Category] = Category.EUCategoryUndefined
    class_: Optional[Class] = Class.EUClassUndefined


@dataclass
class RIDFlightDetails:
    id: str
    eu_classification: Optional[UAClassificationEU] = None
    uas_id: Optional[UASID] = None
    operator_id: Optional[str] = ""
    operator_location: Optional[OperatorLocation] = None
    operation_description: Optional[str] = ""
    auth_data: Optional[RIDAuthData] = None


class UAType(str, Enum):
    NotDeclared = "NotDeclared"
    Aeroplane = "Aeroplane"
    Helicopter = "Helicopter"
    Gyroplane = "Gyroplane"
    HybridLift = "HybridLift"
    Ornithopter = "Ornithopter"
    Glider = "Glider"
    Kite = "Kite"
    FreeBalloon = "FreeBalloon"
    CaptiveBalloon = "CaptiveBalloon"
    Airship = "Airship"
    FreeFallOrParachute = "FreeFallOrParachute"
    Rocket = "Rocket"
    TetheredPoweredAircraft = "TetheredPoweredAircraft"
    GroundObstacle = "GroundObstacle"
    Other = "Other"


USSBaseURL = str


SubscriptionUSSBaseURL = USSBaseURL


FlightsUSSBaseURL = USSBaseURL


@dataclass
class Circle:
    center: Optional[LatLngPoint] = None
    radius: Optional[Radius] = None


@dataclass
class Volume3D:
    outline_circle: Optional[Circle] = None
    outline_polygon: Optional[Polygon] = None
    altitude_lower: Optional[Altitude] = None
    altitude_upper: Optional[Altitude] = None


@dataclass
class Volume4D:
    volume: Volume3D
    time_start: Optional[RIDTime] = None
    time_end: Optional[RIDTime] = None


@dataclass
class SubscriptionState:
    subscription_id: SubscriptionUUID
    notification_index: Optional[SubscriptionNotificationIndex] = 0


@dataclass
class GetFlightDetailsResponse:
    details: RIDFlightDetails


@dataclass
class RIDAircraftPosition:
    lat: Optional[Latitude] = None
    lng: Optional[Longitude] = None
    alt: Optional[float] = -1000
    accuracy_h: Optional[HorizontalAccuracy] = None
    accuracy_v: Optional[VerticalAccuracy] = None
    extrapolated: Optional[bool] = False
    pressure_altitude: Optional[float] = -1000
    height: Optional[RIDHeight] = None


@dataclass
class SubscriberToNotify:
    subscriptions: List[SubscriptionState]
    url: URL


@dataclass
class RIDRecentAircraftPosition:
    time: RIDTime
    position: RIDAircraftPosition


@dataclass
class GetIdentificationServiceAreaDetailsResponse:
    extents: Volume4D


@dataclass
class CreateIdentificationServiceAreaParameters:
    extents: Volume4D
    uss_base_url: FlightsUSSBaseURL


@dataclass
class UpdateIdentificationServiceAreaParameters:
    extents: Volume4D
    uss_base_url: FlightsUSSBaseURL


@dataclass
class CreateSubscriptionParameters:
    extents: Volume4D
    uss_base_url: SubscriptionUSSBaseURL


@dataclass
class UpdateSubscriptionParameters:
    extents: Volume4D
    uss_base_url: SubscriptionUSSBaseURL


@dataclass
class Subscription:
    id: SubscriptionUUID
    uss_base_url: SubscriptionUSSBaseURL
    owner: str
    version: Version
    notification_index: Optional[SubscriptionNotificationIndex] = 0
    time_end: Optional[RIDTime] = None
    time_start: Optional[RIDTime] = None


@dataclass
class IdentificationServiceArea:
    uss_base_url: FlightsUSSBaseURL
    owner: str
    time_start: RIDTime
    time_end: RIDTime
    version: Version
    id: EntityUUID


@dataclass
class RIDAircraftState:
    timestamp: RIDTime
    timestamp_accuracy: float
    position: RIDAircraftPosition
    speed_accuracy: SpeedAccuracy
    operational_status: Optional[RIDOperationalStatus] = RIDOperationalStatus.Undeclared
    track: Optional[float] = 361
    speed: Optional[float] = 255
    vertical_speed: Optional[float] = 63


@dataclass
class GetSubscriptionResponse:
    subscription: Subscription


@dataclass
class SearchSubscriptionsResponse:
    subscriptions: Optional[List[Subscription]] = field(default_factory=lambda: [])


@dataclass
class DeleteSubscriptionResponse:
    subscription: Subscription


@dataclass
class RIDFlight:
    id: RIDFlightID
    aircraft_type: UAType
    current_state: Optional[RIDAircraftState] = None
    operating_area: Optional[OperatingArea] = None
    simulated: Optional[bool] = False
    recent_positions: Optional[List[RIDRecentAircraftPosition]] = field(default_factory=lambda: [])


@dataclass
class PutIdentificationServiceAreaResponse:
    service_area: IdentificationServiceArea
    subscribers: Optional[List[SubscriberToNotify]] = field(default_factory=lambda: [])


@dataclass
class SearchIdentificationServiceAreasResponse:
    service_areas: Optional[List[IdentificationServiceArea]] = field(default_factory=lambda: [])


@dataclass
class PutIdentificationServiceAreaNotificationParameters:
    subscriptions: List[SubscriptionState]
    service_area: Optional[IdentificationServiceArea] = None
    extents: Optional[Volume4D] = None


@dataclass
class DeleteIdentificationServiceAreaResponse:
    service_area: IdentificationServiceArea
    subscribers: Optional[List[SubscriberToNotify]] = field(default_factory=lambda: [])


@dataclass
class PutSubscriptionResponse:
    subscription: Subscription
    service_areas: Optional[List[IdentificationServiceArea]] = field(default_factory=lambda: [])


@dataclass
class GetIdentificationServiceAreaResponse:
    service_area: IdentificationServiceArea


@dataclass
class GetFlightsResponse:
    timestamp: RIDTime
    flights: Optional[List[RIDFlight]] = field(default_factory=lambda: [])
    no_isas_present: Optional[bool] = False
